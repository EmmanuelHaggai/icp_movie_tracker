type Movie = record {
  id : text;
  status : text;
  resume : text;
  title : text;
  userId : text;
  createdAt : nat64;
  updatedAt : opt nat64;
  synopsis : text;
  posterURL : text;
  genres : text;
  notes : text;
  myRatingOutOfTen : float64;
};
type MoviePayload = record {
  status : text;
  resume : text;
  title : text;
  synopsis : text;
  posterURL : text;
  genres : text;
  notes : text;
  myRatingOutOfTen : float64;
};
type User = record {
  id : text;
  fullName : text;
  email : text;
  updatedAt : opt nat64;
  phone : text;
  registeredAt : nat64;
};
type UserPayload = record { fullName : text; email : text; phone : text };
type _AzleResult = variant { Ok : User; Err : text };
type _AzleResult_1 = variant { Ok : vec Movie; Err : text };
type _AzleResult_2 = variant { Ok : vec User; Err : text };
type _AzleResult_3 = variant { Ok : Movie; Err : text };
service : () -> {
  DeleteUser : (text) -> (_AzleResult);
  editUser : (text, UserPayload) -> (_AzleResult);
  getCallerId : () -> (text) query;
  getLoggedMovies : () -> (_AzleResult_1) query;
  getMyUserProfile : () -> (_AzleResult_2) query;
  logMovie : (MoviePayload) -> (_AzleResult_3);
  registerUser : (UserPayload) -> (_AzleResult);
  removeMovie : (text) -> (_AzleResult_3);
  updateMovie : (text, MoviePayload) -> (_AzleResult_3);
}